1.

Lab 3: Create a database called library_db and a table books with columns: book_id, 
title, author, publisher, year_of_publication, and price. Insert five records into 
the table. 

--> CREATE TABLE books ( book_id int PRIMARY KEY AUTO_INCREMENT,title varchar(60) not null, author varchar(60)not null, publisher varchar(60)not null, year_of_publication int not null ,price int not null)

INSERT INTO books ( book_id, title ,author ,publisher ,year_of_publication, price)VALUES(101,'c lan','Dennis Ritchie','Dennis Ritchie',1972,200);
INSERT INTO books ( book_id, title ,author ,publisher ,year_of_publication, price)VALUES(102,'zindgi','osho','book new',2000,250);
INSERT INTO books ( book_id, title ,author ,publisher ,year_of_publication, price)VALUES(103,'yoga','baba ramdev','patanjali',2014,500);
INSERT INTO books ( book_id, title ,author ,publisher ,year_of_publication, price)VALUES(104,'python','Dennis Ritchie','Dennis Ritchie',1972,200);
INSERT INTO books ( book_id, title ,author ,publisher ,year_of_publication, price)VALUES(105,'jokes','kapil','the new book',2024,300);


Lab 4: Create a table members in library_db with columns: member_id, member_name, 
date_of_membership, and email. Insert five records into this table.

-->CREATE TABLE members (  member_id INT PRIMARY KEY AUTO_INCREMENT,member_name VARCHAR(60) NOT NULL, date_of_membership DATE NOT NULL, email VARCHAR(60) NOT NULL);

INSERT INTO members (member_id, member_name, date_of_membership, email)VALUES(1001,'ved jani','2022-01-01','vedjani@gmail.com');
INSERT INTO members (member_id, member_name, date_of_membership, email)VALUES(1002,'rushi jani','2021-06-23','rushijani@gmail.com');
INSERT INTO members (member_id, member_name, date_of_membership, email)VALUES(1003,'harsh chauhan','2022-07-10','harsh123@gmail.com');
INSERT INTO members (member_id, member_name, date_of_membership, email)VALUES(1004,'abhay gajjar','2025-08-21','abhay12@gmail.com');
INSERT INTO members (member_id, member_name, date_of_membership, email)VALUES(1005,'dev joshi','2025-08-21','dj2311@gmail.com');



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2


Lab 3: Retrieve all members who joined the library before 2022. Use appropriate SQL syntax 
with WHERE and ORDER BY. 

-->
SELECT member_id, member_name, date_of_membership, email FROM members
WHERE date_of_membership < '2022-01-01'
ORDER BY date_of_membership ASC;


Lab 4: Write SQL queries to display the titles of books published by a specific author. Sort the 
results by year_of_publication in descending order.
-->
SELECT title, year_of_publication, author
FROM books
WHERE author = 'Dennis Ritchie'
ORDER BY year_of_publication DESC;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3

Lab 3: Add a CHECK constraint to ensure that the price of books in the books table is 
greater than 0. 

-->
ALTER TABLE books
ADD CONSTRAINT chk_price CHECK (price > 0);

nathi kam kartu

Lab 4: Modify the members table to add a UNIQUE constraint on the email column, 
ensuring that each member has a unique email address. 

-->
ALTER TABLE members
ADD UNIQUE (email);


----------------------------------------------------------------------------------------------------------------------------------------
4

Lab 3: Create a table authors with the following columns: author_id, first_name, 
last_name, and country. Set author_id as the primary key. 

-->
CREATE TABLE authors ( author_id INT PRIMARY KEY AUTO_INCREMENT, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, country VARCHAR(50) NOT NULL);

Lab 4: Create a table publishers with columns: publisher_id, publisher_name, 
contact_number, and address. Set publisher_id as the primary key and 
contact_number as unique. 

-->
CREATE TABLE publishers ( publisher_id INT PRIMARY KEY AUTO_INCREMENT, publisher_name VARCHAR(100) NOT NULL, contact_number VARCHAR(20) UNIQUE NOT NULL,
address VARCHAR(150) NOT NULL);

--------------------------------------------------------------------------------------------------------------------------------------------------

5

Lab 3: Add a new column genre to the books table. Update the genre for all existing 
records. 

-->
ALTER TABLE books ADD  genre varchar(30);

UPDATE books SET genre = 'Programming' WHERE title='c lan' ;
UPDATE books SET genre = 'Programming' WHERE title='python' ;
UPDATE books SET genre = 'Spiritual' WHERE title='zindgi' ;
UPDATE books SET genre = 'Health' WHERE title = 'yoga';
UPDATE books SET genre = 'Comedy' WHERE title = 'jokes';


Lab 4: Modify the members table to increase the length of the email column to 100 
characters. 

-->
ALTER TABLE members MODIFY COLUMN email varchar(100) NOT NULL;

-------------------------------------------------------------------------------------------------------------------------------------------------------

6

Lab 3: Drop the publishers table from the database after verifying its structure. 

-->
DROP TABLE publishers





Lab 4: Create a backup of the members table and then drop the original members table. 

-->
DROP TABLE members 


----------------------------------------------------------------------------------------------------------------------------------------------------
 
7

Lab 4: Insert three new authors into the authors table, then update the last name of one of 
the authors. 

-->
INSERT INTO authors ( author_id , first_name , last_name , country ) VALUES (01,'ramdev','baba','india');
INSERT INTO authors ( author_id , first_name , last_name , country ) VALUES (02,'Dennis ','Ritchie','usa');

UPDATE authors SET last_name = 'patanjali baba' WHERE author_id = 01;


Lab 5: Delete a book from the books table where the price is higher than $100.(higher than 500) 

-->
DELETE FROM books WHERE price >500;

-------------------------------------------------------------------------------------------------------------------------------------------

8

Lab 3: Update the year_of_publication of a book with a specific book_id. 

-->
UPDATE books SET year_of_publication = 2025 WHERE book_id = 103;


Lab 4: Increase the price of all books published before 2015 by 10%. 

-->
UPDATE books SET price = price * 1.10 WHERE year_of_publication < 2015;

-------------------------------------------------------------------------------------------------------------------------------------------------

9

Lab 3: Remove all members who joined before 2020 from the members table.

-->
DELETE FROM members WHERE date_of_membership < '2020-01-01';


Lab 4: Delete all books that have a NULL value in the author column. 

-->

DELETE FROM books WHERE author IS NULL;

----------------------------------------------------------------------------------------------------------------------------------------------

10

Lab 4: Write a query to retrieve all books with price between $50 and $100.

-->

SELECT * FROM books WHERE price BETWEEN 200 AND 500;

Lab 5: Retrieve the list of books sorted by author in ascending order and limit the results 
to the top 3 entries

-->
SELECT * FROM books ORDER BY author ASC LIMIT 3;


------------------------------------------------------------------------------------------------------------------------------------------------

11

Lab 3: Grant SELECT permission to a user named librarian on the books table.

-->
GRANT SELECT
ON books
TO 'librarian'@'localhost';


Lab 4: Grant INSERT and UPDATE permissions to the user admin on the members table. 

-->
GRANT INSERT, UPDATE
ON members
TO 'admin'@'localhost';


----------------------------------------------------------------------------------------------------------------------------------------

12

Lab 3: Revoke the INSERT privilege from the user librarian on the books table.

-->

REVOKE INSERT
ON books
FROM 'librarian'@'localhost';

Lab 4: Revoke all permissions from user admin on the members table. 

-->
REVOKE ALL PRIVILEGES
ON members
FROM 'admin'@'localhost';

--------------------------------------------------------------------------------------------------------------------------------------

13

Lab 3: Use COMMIT after inserting multiple records into the books table, then make another 
insertion and perform a ROLLBACK. 

-->

START TRANSACTION;

INSERT INTO books (book_id, title, author_id, price, year_of_publication, genre)
VALUES
(501, 'Database Systems', 201, 400, 2020, 'Database'),
(502, 'SQL Made Easy', 202, 350, 2021, 'Programming'),
(503, 'Mastering MySQL', 203, 500, 2022, 'Database');

COMMIT;

START TRANSACTION;
INSERT INTO books (book_id, title, author_id, price, year_of_publication, genre)
VALUES (504, 'Temporary Book', 204, 300, 2023, 'Testing');

ROLLBACK;


Lab 4: Set a SAVEPOINT before making updates to the members table, perform some 
updates, and then roll back to the SAVEPOINT.

-->
START TRANSACTION;

UPDATE members 
SET name = 'Rahul Sharma' 
WHERE member_id = 101;

SAVEPOINT before_updates;

UPDATE members 
SET name = 'Anjali Verma' 
WHERE member_id = 102;

UPDATE members 
SET name = 'Amit Patel' 
WHERE member_id = 103;

ROLLBACK TO before_updates;

COMMIT;

-----------------------------------------------------------------------------------------------------------------------------------------

14


Lab 3: Perform an INNER JOIN between books and authors tables to display the title 
of books and their respective authors' names.

-->
ALTER TABLE books ADD COLUMN author_id INT;

ALTER TABLE books ADD CONSTRAINT fork_author FOREIGN KEY (author_id) REFERENCES authors(author_id);

SELECT b.title, a.first_name, a.last_name FROM books b INNER JOIN authors a ON b.author_id = a.author_id;


Lab 4: Use a FULL OUTER JOIN to retrieve all records from the books and authors tables, 
including those with no matching entries in the other table.

-->
SELECT b.book_id, b.title, b.price, a.author_id, a.first_name, a.last_name, a.country FROM books b LEFT JOIN authors a ON b.author_id = a.author_id
UNION
SELECT b.book_id, b.title, b.price, a.author_id, a.first_name, a.last_name, a.country FROM books b RIGHT JOIN authors a ON b.author_id = a.author_id;


--------------------------------------------------------------------------------------------------------------------------------------------

15

Lab 3: Group books by genre and display the total number of books in each genre. 

-->
SELECT genre, COUNT(*) AS total_books FROM books GROUP BY genre;


Lab 4: Group members by the year they joined and find the number of members who joined 
each year. 

-->
SELECT YEAR(date_of_membership) AS join_year,COUNT(*) AS member_count FROM members GROUP BY YEAR(date_of_membership) ORDER BY join_year;

---------------------------------------------------------------------------------------------------------------------------------------------------

16

Lab 3: Write a stored procedure to retrieve all books by a particular author.

-->
DELIMITER $$

CREATE PROCEDURE GetBooksByAuthor(IN p_author_id INT)
BEGIN
    SELECT b.book_id, b.title, b.publisher, b.year_of_publication, b.price, b.genre
    FROM books b
    INNER JOIN authors a ON b.author_id = a.author_id
    WHERE a.author_id = p_author_id;
END$$

DELIMITER ;

Lab 4: Write a stored procedure that takes book_id as an argument and returns the price 
of the book.

-->
DELIMITER $$

CREATE PROCEDURE GetBookPrice(IN p_book_id INT)
BEGIN
    SELECT price
    FROM books
    WHERE book_id = p_book_id;
END$$

DELIMITER ;

-------------------------------------------------------------------------------------------------------------------------------------

17

Lab 3: Create a view to show only the title, author, and price of books from the books 
table. 

-->
CREATE VIEW books_view AS
SELECT 
    title, 
    author, 
    price
FROM books;


Lab 4: Create a view to display members who joined before 2020. 

-->
CREATE VIEW members_before_2020 AS
SELECT *
FROM members
WHERE date_of_membership < '2020-01-01';

-------------------------------------------------------------------------------------------------------------------------------------------------

18

Lab 3: Create a trigger to automatically update the last_modified timestamp of the 
books table whenever a record is updated.

-->
ALTER TABLE books 
ADD COLUMN last_modified TIMESTAMP DEFAULT CURRENT_TIMESTAMP 
ON UPDATE CURRENT_TIMESTAMP;

DELIMITER $$

CREATE TRIGGER update_last_modified
BEFORE UPDATE ON books
FOR EACH ROW
BEGIN
    SET NEW.last_modified = NOW();
END$$

DELIMITER ;


Lab 4: Create a trigger that inserts a log entry into a log_changes table whenever a 
DELETE operation is performed on the books table.

-->
CREATE TABLE log_changes (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT,
    title VARCHAR(60),
    deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


DELIMITER $$

CREATE TRIGGER after_book_delete
AFTER DELETE ON books
FOR EACH ROW
BEGIN
    INSERT INTO log_changes (book_id, title, deleted_at)
    VALUES (OLD.book_id, OLD.title, NOW());
END$$

DELIMITER ;


-------------------------------------------------------------------------------------------------------------------------------------------

19

Lab 3: Write a PL/SQL block to insert a new book into the books table and display a 
confirmation message. 

-->
SET SERVEROUTPUT ON;

DECLARE
    v_book_id        INT := 106;  
    v_title          VARCHAR2(60) := 'AI Basics';
    v_author         VARCHAR2(60) := 'John Smith';
    v_publisher      VARCHAR2(60) := 'TechPress';
    v_year           INT := 2025;
    v_price          INT := 450;
    v_genre          VARCHAR2(50) := 'Technology';
BEGIN
    INSERT INTO books (book_id, title, author, publisher, year_of_publication, price, genre)
    VALUES (v_book_id, v_title, v_author, v_publisher, v_year, v_price, v_genre);

    DBMS_OUTPUT.PUT_LINE('Book inserted successfully: ' || v_title || ' by ' || v_author);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inserting book: ' || SQLERRM);
END;
/



Lab 4: Write a PL/SQL block to display the total number of books in the books table

-->

SET SERVEROUTPUT ON;

DECLARE
    v_total_books NUMBER;
BEGIN
    -- Count total books
    SELECT COUNT(*) INTO v_total_books
    FROM books;

    -- Display result
    DBMS_OUTPUT.PUT_LINE('Total number of books: ' || v_total_books);
END;
/


-------------------------------------------------------------------------------------------------------------------------------------------

20

Lab 3: Write a PL/SQL block to declare variables for book_id and price, assign values, and 
display the results.

-->
DELIMITER $$

CREATE PROCEDURE ShowBookDetails()
BEGIN
    DECLARE v_book_id INT DEFAULT 101;   -- assigning book_id
    DECLARE v_price   INT DEFAULT 250;   -- assigning price

    SELECT CONCAT('Book ID: ', v_book_id) AS Message1,
           CONCAT('Price: ', v_price) AS Message2;
END$$

DELIMITER ;



Lab 4: Write a PL/SQL block using constants and perform arithmetic operations on book 
prices.

-->
DELIMITER $$

CREATE PROCEDURE PriceCalculations()
BEGIN
    
    DECLARE c_price1 INT DEFAULT 200;
    DECLARE c_price2 INT DEFAULT 300;

    
    DECLARE v_total INT;
    DECLARE v_diff  INT;
    DECLARE v_mul   INT;
    DECLARE v_div   DECIMAL(10,2);

    SET v_total = c_price1 + c_price2;
    SET v_diff  = c_price2 - c_price1;
    SET v_mul   = c_price1 * c_price2;
    SET v_div   = c_price2 / c_price1;

    
    SELECT CONCAT('Price 1: ', c_price1) AS Result
    UNION ALL
    SELECT CONCAT('Price 2: ', c_price2)
    UNION ALL
    SELECT CONCAT('Total Price (Addition): ', v_total)
    UNION ALL
    SELECT CONCAT('Difference (Subtraction): ', v_diff)
    UNION ALL
    SELECT CONCAT('Multiplication: ', v_mul)
    UNION ALL
    SELECT CONCAT('Division: ', v_div);
END$$

DELIMITER ;

-------------------------------------------------------------------------------------------------------------------------------------------

21

Lab 3: Write a PL/SQL block using IF-THEN-ELSE to check if a book's price is above $100 
and print a message accordingly.

-->
DELIMITER $$

CREATE PROCEDURE CheckBookPrice(IN p_book_id INT)
BEGIN
    DECLARE v_price INT;
    DECLARE v_title VARCHAR(100);

    SELECT price, title INTO v_price, v_title
    FROM books
    WHERE book_id = p_book_id;
    
    IF v_price > 100 THEN
        SELECT CONCAT('Book "', v_title, '" (ID: ', p_book_id, ') has price above 100. Price = ', v_price) AS Message;
    ELSE
        SELECT CONCAT('Book "', v_title, '" (ID: ', p_book_id, ') has price 100 or less. Price = ', v_price) AS Message;
    END IF;
END$$

DELIMITER ;



Lab 4: Use a FOR LOOP in PL/SQL to display the details of all books one by one. 

-->
DELIMITER $$

CREATE PROCEDURE ShowBooks()
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE v_book_id INT;
    DECLARE v_title VARCHAR(100);
    DECLARE v_author_id INT;
    DECLARE v_price DECIMAL(10,2);
    DECLARE v_year INT;

    
    DECLARE book_cursor CURSOR FOR 
        SELECT book_id, title, author_id, price, year_of_publication FROM books;

    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN book_cursor;

    book_loop: LOOP
        FETCH book_cursor INTO v_book_id, v_title, v_author_id, v_price, v_year;
        IF done = 1 THEN
            LEAVE book_loop;
        END IF;

        
        SELECT CONCAT('Book ID: ', v_book_id,
                      ', Title: ', v_title,
                      ', Author ID: ', v_author_id,
                      ', Price: ', v_price,
                      ', Year: ', v_year) AS Book_Details;
    END LOOP;

    CLOSE book_cursor;
END$$

DELIMITER ;

--------------------------------------------------------------------------------------------------------------------------------------------

22

Lab 3: Write a PL/SQL block using an explicit cursor to fetch and display all records from the 
members table

-->
DELIMITER $$

CREATE PROCEDURE show_members()
BEGIN
    
    DECLARE v_member_id INT;
    DECLARE v_first_name VARCHAR(50);
    DECLARE v_last_name VARCHAR(50);
    DECLARE v_email VARCHAR(100);
    DECLARE v_join_date DATE;


    DECLARE done INT DEFAULT 0;

 
    DECLARE cur CURSOR FOR
        SELECT member_id, first_name, last_name, email, join_date FROM members;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO v_member_id, v_first_name, v_last_name, v_email, v_join_date;
        IF done = 1 THEN
            LEAVE read_loop;
        END IF;

        SELECT CONCAT('Member ID: ', v_member_id,
                      ', Name: ', v_first_name, ' ', v_last_name,
                      ', Email: ', v_email,
                      ', Join Date: ', v_join_date) AS Member_Details;
    END LOOP;

    CLOSE cur;
END$$

DELIMITER ;

Lab 4: Create a cursor to retrieve books by a particular author and display their titles.

-->

DELIMITER $$

CREATE PROCEDURE get_books_by_author(IN p_author_id INT)
BEGIN

    DECLARE v_book_id INT;
    DECLARE v_title VARCHAR(100);
    DECLARE v_price DECIMAL(10,2);
    DECLARE v_year INT;
    DECLARE done INT DEFAULT 0;

   
    DECLARE cur CURSOR FOR
        SELECT book_id, title, price, year_of_publication
        FROM books
        WHERE author_id = p_author_id;

  
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO v_book_id, v_title, v_price, v_year;
        IF done = 1 THEN
            LEAVE read_loop;
        END IF;

       
        SELECT CONCAT('Book ID: ', v_book_id,
                      ', Title: ', v_title,
                      ', Price: ', v_price,
                      ', Year: ', v_year) AS Book_Details;
    END LOOP;

    CLOSE cur;
END$$

DELIMITER ;


------------------------------------------------------------------------------------------------------------------------------------------

23

Lab 3: Perform a transaction that includes inserting a new member, setting a SAVEPOINT, 
and rolling back to the savepoint after making updates.

-->
START TRANSACTION;

INSERT INTO members (member_id, name, email, join_date)
VALUES (401, 'Ved Jani', 'vedjani@example.com', '2024-08-23');

SAVEPOINT sp_after_insert;

UPDATE members
SET email = 'wrong_email@example.com'
WHERE member_id = 401;

ROLLBACK TO sp_after_insert;

COMMIT;


Lab 4: Use COMMIT after successfully inserting multiple books into the books table, then use 
ROLLBACK to undo a set of changes made after a savepoint.

-->
START TRANSACTION;

INSERT INTO books (book_id, title, author_id, price, year_of_publication, genre)
VALUES 
(301, 'MySQL Basics', 201, 350, 2021, 'Database'),
(302, 'Learning SQL', 202, 450, 2019, 'Database'),
(303, 'Advanced SQL', 203, 550, 2022, 'Programming');

COMMIT;

START TRANSACTION;

SAVEPOINT sp_after_insert;

UPDATE books
SET price = price + 100
WHERE book_id = 301;

DELETE FROM books
WHERE book_id = 303;

ROLLBACK TO sp_after_insert;

COMMIT;
